"""
Django settings for py_backend project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from django.core.management.utils import get_random_secret_key
import os

AUTH_USER_MODEL = 'users.CustomUser'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 0) == 'True'
ALLOWED_HOSTS = ['*']

# Define for backend

MIN_LEN_USERNAME = 3
MIN_LEN_PASSWORD = 8
MAX_LEN_USERNAME = 25
MAX_LEN_TOURNAMENT_USERNAME = 10
MAX_LEN_EMAIL = 50
MAX_LEN_TEXT = 500
FORTY_TWO_UID = os.environ.get('FORTY_TWO_UID')
FORTY_TWO_SECRET = os.environ.get("FORTY_TWO_SECRET")
FORTY_TWO_REDIRECT_URI = os.environ.get("FORTY_TWO_URL")
LANG = ['en', 'fr', 'es']
IMAGE_EXTENSION = ['.png', '.PNG', '.jpg', '.JPG', '.jpeg', '.JPEG']

# Application definition

INSTALLED_APPS = [
	'corsheaders',
	'daphne',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
    'channels',
	'multiplayer',
	'users',
	'friends',
	'tournaments',
    'stats',
	'auth42',
]

ASGI_APPLICATION = 'py_backend.asgi.application'

CHANNEL_LAYERS = {
	"default": {
		 "BACKEND": "channels.layers.InMemoryChannelLayer"
		# "BACKEND": "channels_redis.core.RedisChannelLayer",
		# "CONFIG": {
		#     "hosts": [("127.0.0.1", 6379)],
		# },
	},
}

MIDDLEWARE = [
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'py_backend.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
  		'DIRS': [BASE_DIR / 'users/templates'], 
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'py_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if 'GITHUB_ACTIONS' in os.environ:
	DATABASES = {
		'default': {
			'ENGINE': 'django.db.backends.sqlite3',
			'NAME': BASE_DIR / 'db.sqlite3',
		}
	}
else:
    DATABASES = {
	"default": {
		"ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.postgresql"),
		"NAME": os.environ.get("SQL_DATABASE"),
		"USER": os.environ.get("SQL_USER", "user"),
		"PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
		"HOST": os.environ.get("SQL_HOST", "localhost"),
		"PORT": os.environ.get("SQL_PORT", "5432"),
	}
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
		"OPTIONS": {
			"min_length": MIN_LEN_PASSWORD,
		},
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
	{
		'NAME': 'users.validators.ContainsDigitValidator',
	},
	{
		'NAME': 'users.validators.ContainsSpecialCharValidator',
	},
	{
		'NAME': 'users.validators.ContainsUppercaseValidator',
	},
	{
		'NAME': 'users.validators.ContainsLowercaseValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = "/staticfiles/"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#HSTS settings
SECURE_HSTS_SECONDS = os.environ.get('SECURE_HSTS_SECONDS', 0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD') == 'True'

#HTTPS settings
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT') == 'True'
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE') == 'True'
CSRF_COOKIE_SECURE = True


DJANGO_ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", default=[])
if "," in DJANGO_ALLOWED_HOSTS:
	DJANGO_ALLOWED_HOSTS = DJANGO_ALLOWED_HOSTS.split(",")

# Define CORS and CSRF trusted origins
CORS_ALLOWED_ORIGINS = [
    *["https://" + host + ":8000" for host in DJANGO_ALLOWED_HOSTS]
]

CSRF_TRUSTED_ORIGINS = [
    *["https://" + host + ":8000" for host in DJANGO_ALLOWED_HOSTS]
]

# Define allowed hosts
ALLOWED_HOSTS = [
    *DJANGO_ALLOWED_HOSTS
]

CORS_ORIGIN_WHITELIST = [
    *["https://" + host + ":8000" for host in DJANGO_ALLOWED_HOSTS]
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'backend.amos@gmail.com'
EMAIL_HOST_PASSWORD = 'hvqzjctapjxiijjf'
EMAIL_USE_TLS = True
